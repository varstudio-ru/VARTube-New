//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/_Project/InputActions/ARInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/_Project/InputActions/ARInputActions.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @ARInputActions: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @ARInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ARInputActions"",
    ""maps"": [
        {
            ""name"": ""MobileControlls"",
            ""id"": ""4e6fd3bf-461b-4b2c-961a-31e9fe1aa57b"",
            ""actions"": [
                {
                    ""name"": ""PointerPress"",
                    ""type"": ""Value"",
                    ""id"": ""55171210-0150-4348-94bd-1276bd2e2ddc"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PointerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""dfb8d32f-859b-4b11-90dc-f94c6c6b685a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ba3b0982-cdad-4514-8902-bdb30dc6062c"",
                    ""path"": ""<Touchscreen>/touch*"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f7033451-2cf6-4892-b8e6-a7fed0acff9f"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""StandaloneControlls"",
            ""id"": ""5bce025d-624e-4ce5-806f-57f98635d076"",
            ""actions"": [
                {
                    ""name"": ""PointerPress"",
                    ""type"": ""Button"",
                    ""id"": ""f459ad8c-6425-44c4-91bd-3372595ded79"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PointerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""217fc7d0-ff97-4675-9142-7e1caa032b62"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""eeb90c01-7eba-44ff-992e-032a49b49d26"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""17df72ce-5d62-412e-9c03-53581765290c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48a371ab-b07c-4192-a0f9-9033aa431142"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e73ca444-3fcc-4143-9d53-11c1a5cb724a"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0.1,y=0.1)"",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SpawnInput"",
            ""id"": ""4f652832-31d5-4d79-977f-89314e3f29ae"",
            ""actions"": [
                {
                    ""name"": ""Touch"",
                    ""type"": ""Button"",
                    ""id"": ""e19a4b7e-8778-4141-95db-c8149bc2b414"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""bd8770c8-b04f-4069-b0da-182d97db5543"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7dafe9ee-f65a-4a1f-b04a-f0f7d800de44"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""414c24c9-c9d9-4584-a960-63c4dee05ea0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cad59e86-2850-4b4e-9e7f-b9e6b83de733"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""428bad70-9c69-489c-9af8-067b3c470b9d"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MobileControlls
        m_MobileControlls = asset.FindActionMap("MobileControlls", throwIfNotFound: true);
        m_MobileControlls_PointerPress = m_MobileControlls.FindAction("PointerPress", throwIfNotFound: true);
        m_MobileControlls_PointerPosition = m_MobileControlls.FindAction("PointerPosition", throwIfNotFound: true);
        // StandaloneControlls
        m_StandaloneControlls = asset.FindActionMap("StandaloneControlls", throwIfNotFound: true);
        m_StandaloneControlls_PointerPress = m_StandaloneControlls.FindAction("PointerPress", throwIfNotFound: true);
        m_StandaloneControlls_PointerPosition = m_StandaloneControlls.FindAction("PointerPosition", throwIfNotFound: true);
        m_StandaloneControlls_Scroll = m_StandaloneControlls.FindAction("Scroll", throwIfNotFound: true);
        // SpawnInput
        m_SpawnInput = asset.FindActionMap("SpawnInput", throwIfNotFound: true);
        m_SpawnInput_Touch = m_SpawnInput.FindAction("Touch", throwIfNotFound: true);
        m_SpawnInput_Position = m_SpawnInput.FindAction("Position", throwIfNotFound: true);
    }

    ~@ARInputActions()
    {
        UnityEngine.Debug.Assert(!m_MobileControlls.enabled, "This will cause a leak and performance issues, ARInputActions.MobileControlls.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_StandaloneControlls.enabled, "This will cause a leak and performance issues, ARInputActions.StandaloneControlls.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_SpawnInput.enabled, "This will cause a leak and performance issues, ARInputActions.SpawnInput.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MobileControlls
    private readonly InputActionMap m_MobileControlls;
    private List<IMobileControllsActions> m_MobileControllsActionsCallbackInterfaces = new List<IMobileControllsActions>();
    private readonly InputAction m_MobileControlls_PointerPress;
    private readonly InputAction m_MobileControlls_PointerPosition;
    /// <summary>
    /// Provides access to input actions defined in input action map "MobileControlls".
    /// </summary>
    public struct MobileControllsActions
    {
        private @ARInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public MobileControllsActions(@ARInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "MobileControlls/PointerPress".
        /// </summary>
        public InputAction @PointerPress => m_Wrapper.m_MobileControlls_PointerPress;
        /// <summary>
        /// Provides access to the underlying input action "MobileControlls/PointerPosition".
        /// </summary>
        public InputAction @PointerPosition => m_Wrapper.m_MobileControlls_PointerPosition;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_MobileControlls; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="MobileControllsActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(MobileControllsActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="MobileControllsActions" />
        public void AddCallbacks(IMobileControllsActions instance)
        {
            if (instance == null || m_Wrapper.m_MobileControllsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MobileControllsActionsCallbackInterfaces.Add(instance);
            @PointerPress.started += instance.OnPointerPress;
            @PointerPress.performed += instance.OnPointerPress;
            @PointerPress.canceled += instance.OnPointerPress;
            @PointerPosition.started += instance.OnPointerPosition;
            @PointerPosition.performed += instance.OnPointerPosition;
            @PointerPosition.canceled += instance.OnPointerPosition;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="MobileControllsActions" />
        private void UnregisterCallbacks(IMobileControllsActions instance)
        {
            @PointerPress.started -= instance.OnPointerPress;
            @PointerPress.performed -= instance.OnPointerPress;
            @PointerPress.canceled -= instance.OnPointerPress;
            @PointerPosition.started -= instance.OnPointerPosition;
            @PointerPosition.performed -= instance.OnPointerPosition;
            @PointerPosition.canceled -= instance.OnPointerPosition;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="MobileControllsActions.UnregisterCallbacks(IMobileControllsActions)" />.
        /// </summary>
        /// <seealso cref="MobileControllsActions.UnregisterCallbacks(IMobileControllsActions)" />
        public void RemoveCallbacks(IMobileControllsActions instance)
        {
            if (m_Wrapper.m_MobileControllsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="MobileControllsActions.AddCallbacks(IMobileControllsActions)" />
        /// <seealso cref="MobileControllsActions.RemoveCallbacks(IMobileControllsActions)" />
        /// <seealso cref="MobileControllsActions.UnregisterCallbacks(IMobileControllsActions)" />
        public void SetCallbacks(IMobileControllsActions instance)
        {
            foreach (var item in m_Wrapper.m_MobileControllsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MobileControllsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="MobileControllsActions" /> instance referencing this action map.
    /// </summary>
    public MobileControllsActions @MobileControlls => new MobileControllsActions(this);

    // StandaloneControlls
    private readonly InputActionMap m_StandaloneControlls;
    private List<IStandaloneControllsActions> m_StandaloneControllsActionsCallbackInterfaces = new List<IStandaloneControllsActions>();
    private readonly InputAction m_StandaloneControlls_PointerPress;
    private readonly InputAction m_StandaloneControlls_PointerPosition;
    private readonly InputAction m_StandaloneControlls_Scroll;
    /// <summary>
    /// Provides access to input actions defined in input action map "StandaloneControlls".
    /// </summary>
    public struct StandaloneControllsActions
    {
        private @ARInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public StandaloneControllsActions(@ARInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "StandaloneControlls/PointerPress".
        /// </summary>
        public InputAction @PointerPress => m_Wrapper.m_StandaloneControlls_PointerPress;
        /// <summary>
        /// Provides access to the underlying input action "StandaloneControlls/PointerPosition".
        /// </summary>
        public InputAction @PointerPosition => m_Wrapper.m_StandaloneControlls_PointerPosition;
        /// <summary>
        /// Provides access to the underlying input action "StandaloneControlls/Scroll".
        /// </summary>
        public InputAction @Scroll => m_Wrapper.m_StandaloneControlls_Scroll;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_StandaloneControlls; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="StandaloneControllsActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(StandaloneControllsActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="StandaloneControllsActions" />
        public void AddCallbacks(IStandaloneControllsActions instance)
        {
            if (instance == null || m_Wrapper.m_StandaloneControllsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_StandaloneControllsActionsCallbackInterfaces.Add(instance);
            @PointerPress.started += instance.OnPointerPress;
            @PointerPress.performed += instance.OnPointerPress;
            @PointerPress.canceled += instance.OnPointerPress;
            @PointerPosition.started += instance.OnPointerPosition;
            @PointerPosition.performed += instance.OnPointerPosition;
            @PointerPosition.canceled += instance.OnPointerPosition;
            @Scroll.started += instance.OnScroll;
            @Scroll.performed += instance.OnScroll;
            @Scroll.canceled += instance.OnScroll;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="StandaloneControllsActions" />
        private void UnregisterCallbacks(IStandaloneControllsActions instance)
        {
            @PointerPress.started -= instance.OnPointerPress;
            @PointerPress.performed -= instance.OnPointerPress;
            @PointerPress.canceled -= instance.OnPointerPress;
            @PointerPosition.started -= instance.OnPointerPosition;
            @PointerPosition.performed -= instance.OnPointerPosition;
            @PointerPosition.canceled -= instance.OnPointerPosition;
            @Scroll.started -= instance.OnScroll;
            @Scroll.performed -= instance.OnScroll;
            @Scroll.canceled -= instance.OnScroll;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="StandaloneControllsActions.UnregisterCallbacks(IStandaloneControllsActions)" />.
        /// </summary>
        /// <seealso cref="StandaloneControllsActions.UnregisterCallbacks(IStandaloneControllsActions)" />
        public void RemoveCallbacks(IStandaloneControllsActions instance)
        {
            if (m_Wrapper.m_StandaloneControllsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="StandaloneControllsActions.AddCallbacks(IStandaloneControllsActions)" />
        /// <seealso cref="StandaloneControllsActions.RemoveCallbacks(IStandaloneControllsActions)" />
        /// <seealso cref="StandaloneControllsActions.UnregisterCallbacks(IStandaloneControllsActions)" />
        public void SetCallbacks(IStandaloneControllsActions instance)
        {
            foreach (var item in m_Wrapper.m_StandaloneControllsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_StandaloneControllsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="StandaloneControllsActions" /> instance referencing this action map.
    /// </summary>
    public StandaloneControllsActions @StandaloneControlls => new StandaloneControllsActions(this);

    // SpawnInput
    private readonly InputActionMap m_SpawnInput;
    private List<ISpawnInputActions> m_SpawnInputActionsCallbackInterfaces = new List<ISpawnInputActions>();
    private readonly InputAction m_SpawnInput_Touch;
    private readonly InputAction m_SpawnInput_Position;
    /// <summary>
    /// Provides access to input actions defined in input action map "SpawnInput".
    /// </summary>
    public struct SpawnInputActions
    {
        private @ARInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public SpawnInputActions(@ARInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "SpawnInput/Touch".
        /// </summary>
        public InputAction @Touch => m_Wrapper.m_SpawnInput_Touch;
        /// <summary>
        /// Provides access to the underlying input action "SpawnInput/Position".
        /// </summary>
        public InputAction @Position => m_Wrapper.m_SpawnInput_Position;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_SpawnInput; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="SpawnInputActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(SpawnInputActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="SpawnInputActions" />
        public void AddCallbacks(ISpawnInputActions instance)
        {
            if (instance == null || m_Wrapper.m_SpawnInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SpawnInputActionsCallbackInterfaces.Add(instance);
            @Touch.started += instance.OnTouch;
            @Touch.performed += instance.OnTouch;
            @Touch.canceled += instance.OnTouch;
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="SpawnInputActions" />
        private void UnregisterCallbacks(ISpawnInputActions instance)
        {
            @Touch.started -= instance.OnTouch;
            @Touch.performed -= instance.OnTouch;
            @Touch.canceled -= instance.OnTouch;
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="SpawnInputActions.UnregisterCallbacks(ISpawnInputActions)" />.
        /// </summary>
        /// <seealso cref="SpawnInputActions.UnregisterCallbacks(ISpawnInputActions)" />
        public void RemoveCallbacks(ISpawnInputActions instance)
        {
            if (m_Wrapper.m_SpawnInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="SpawnInputActions.AddCallbacks(ISpawnInputActions)" />
        /// <seealso cref="SpawnInputActions.RemoveCallbacks(ISpawnInputActions)" />
        /// <seealso cref="SpawnInputActions.UnregisterCallbacks(ISpawnInputActions)" />
        public void SetCallbacks(ISpawnInputActions instance)
        {
            foreach (var item in m_Wrapper.m_SpawnInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SpawnInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="SpawnInputActions" /> instance referencing this action map.
    /// </summary>
    public SpawnInputActions @SpawnInput => new SpawnInputActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "MobileControlls" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="MobileControllsActions.AddCallbacks(IMobileControllsActions)" />
    /// <seealso cref="MobileControllsActions.RemoveCallbacks(IMobileControllsActions)" />
    public interface IMobileControllsActions
    {
        /// <summary>
        /// Method invoked when associated input action "PointerPress" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPointerPress(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PointerPosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPointerPosition(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "StandaloneControlls" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="StandaloneControllsActions.AddCallbacks(IStandaloneControllsActions)" />
    /// <seealso cref="StandaloneControllsActions.RemoveCallbacks(IStandaloneControllsActions)" />
    public interface IStandaloneControllsActions
    {
        /// <summary>
        /// Method invoked when associated input action "PointerPress" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPointerPress(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PointerPosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPointerPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Scroll" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnScroll(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "SpawnInput" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="SpawnInputActions.AddCallbacks(ISpawnInputActions)" />
    /// <seealso cref="SpawnInputActions.RemoveCallbacks(ISpawnInputActions)" />
    public interface ISpawnInputActions
    {
        /// <summary>
        /// Method invoked when associated input action "Touch" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTouch(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Position" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPosition(InputAction.CallbackContext context);
    }
}
